/**
 * Author: Jingyue
 *
 * Input format: 
 * x: y_1 y_2 ... y_k(x)
 * ...
 */

#include "llvm/Support/CommandLine.h"
#include "idm/id.h"
using namespace llvm;

#include <fstream>
#include <sstream>
using namespace std;

#include "icfg-manager.h"

namespace {

	static RegisterPass<slicer::ICFGManager> X(
			"icfg-manager",
			"ICFG manager",
			false,
			true);

	static cl::opt<string> CFGFile(
			"input-cfg",
			cl::NotHidden,
			cl::desc("The CFG file generated by max-slicing"),
			cl::init(""));
}

namespace slicer {

	char ICFGManager::ID = 0;

	void ICFGManager::getAnalysisUsage(AnalysisUsage &AU) const {
		AU.setPreservesAll();
		AU.addRequired<ObjectID>();
		ModulePass::getAnalysisUsage(AU);
	}

	bool ICFGManager::runOnModule(Module &M) {
		if (CFGFile == "")
			return false;
		ObjectID &OI = getAnalysis<ObjectID>();
		ifstream fin(CFGFile.c_str());
		string line;
		while (getline(fin, line)) {
			istringstream iss(line);
			unsigned id_x, id_y;
			MicroBasicBlock *x, *y;

			assert(iss >> id_x);
			x = OI.getMicroBasicBlock(id_x);
			char ch;
			assert(iss >> ch);
			assert(ch == ':');
			while (iss >> id_y) {
				y = OI.getMicroBasicBlock(id_y);
				addEdge(x, y);
			}
		}
		return false;
	}
}
